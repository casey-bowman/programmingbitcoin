= Programming Bitcoin
:imagesdir: images

[[chapter_segwit]]

== Segwit

[.lead]
Segwit stands for segregated witness and was a backwards-compatible upgrade or "soft fork" that activated on the Bitcoin network in August of 2017. While the activation was controversial, the features of this technology require some explanation and in this chapter, we'll explore how Segwit works, why it's backwards compatible and what Segwit enables.

As a brief overview, Segwit did a multitude of things:

* Block size increase
* Transaction malleability fix
* Introduced Segwit versioning for clear upgrade paths
* Quadratic hashing fix
* Offline wallet fee calculation security

It's not entirely obvious what Segwit is, without looking at how it's implemented. We'll start by examining the most basic type of Segwit transaction, pay-to-witness-pubkey-hash.

=== Pay to Witness Pubkey Hash

Pay to witness pubkey hash (p2wpkh) is one of four types of scripts defined by Segwit in BIP0141 and BIP0143. This is a smart contract that acts a lot like pay-to-pubkey-hash, but has some of the "unlocking" data elsewhere. The rearrangement is to fix transaction malleability.

==== Transaction Malleability

Transaction Malleability is the ability to change the transaction's ID without altering the transaction's meaning. Mt. Gox CEO Mark Karpeles famously cited this as the reason why his exchange was not allowing withdrawals back in 2013.

Malleability of the ID turns out to be an important consideration when creating Payment Channels, which are the atomic unit of the Lightning Network. A malleable transaction ID makes creating the Lightning Network much more difficult.

The reason why transaction malleability is a problem at all is because the transaction ID is calculated from the entire transaction. The ID of the transaction is simply the hash256 of the transaction itself. Most of the fields in a transaction cannot be changed without invalidating the transaction's signature (and thus the transaction itself), so from a malleability standpoint, these fields are not a problem.

The one field that does allow for some manipulation without invalidating the Signature is the ScriptSig field on each input. The ScriptSig is emptied before creating the signature hash (see <<chapter_tx>>), so it's possible to change the ScriptSig without invalidating the signature. Also, as we learned in <<chapter_elliptic_curve_cryptography>>, signatures contain a random component. This means that two different ScriptSigs can essentially mean the same thing.

The fact that ScriptSig is _malleable_, that is, able to be changed without changing the meaning of the transaction, means that the Transaction ID is malleable. This means, among other things, that any _dependent_ transactions (that is, a transaction spending one of the malleable transaction's outputs), cannot be constructed in a way to guarantee validity. The previous transaction hash is uncertain, so the dependent transaction's transaction input field cannot be guaranteed to be valid.

=== Fixing malleability

Transaction malleabilty is fixed by simply emptying the ScriptSig field and putting that data elsewhere. For p2wpkh, the signature and pubkey got moved. This way, the transaction ID stays stable as the malleabilty vector disappears. So where do the signature and pubkey go? The signature and pubkey are now put into something called the Witness field, which, crucially, is only sent to nodes that ask for it. In other words, old nodes that haven't upgraded to Segwit simply don't receive the Witness field and don't verify the pubkey and signature.

If this sounds familiar, it should. This is similar to how p2sh works (<<chapter_p2sh>>) in that newer nodes do additional validation that older nodes do not and is the basis for why Segwit is a soft fork (backwards-compatible upgrade) and not a hard fork (backwards-incompatible upgrade).

=== Pay-to-Witness-Pubkey-Hash (p2wpkh)

To understand Segwit, it helps to look at what the transaction looks like when sent to an old node versus a new node:

.Pay-to-witness-pubkey-hash as seen by pre-BIP0141 software
image::p2wpkh1.png[p2wpkh to old nodes]

.Pay-to-witness-pubkey-hash as seen by post-BIP0141 software
image::p2wpkh2.png[p2wpkh to new nodes]

The difference between these two serializations is that the latter transaction has a couple of markers plus the Witness field. Otherwise, the two transactions look more or less the same. The key to making the transaction ID not malleable is that the first serialization is used for calculating the transaction ID.

Note here that the Witness has the Signature and Pubkey as its two elements. These will be utilized for validation below.

The ScriptPubKey for a p2wpkh is OP_0 <20-byte hash>. The ScriptSig, as seen in both serializations above is actually empty. Thus, the actual spending of a p2wpkh output creates a combined Script like so:

.Pay-to-witness-pubkey-hash (p2wpkh) ScriptPubKey
image::p2wpkh3.png[p2wpkh ScriptPubKey]

The processing of this Script starts like this:

.p2wpkh Start
image::p2wpkh4.png[p2wpkh Start]

OP_0 puts a 0 on the stack, which produces this:

.p2wpkh Step 1
image::p2wpkh5.png[p2wpkh Step 1]

The 20-byte hash is simply an element, so it goes straight to the stack:

.p2wpkh Step 2
image::p2wpkh6.png[p2wpkh Step 2]

At this point, older nodes will stop as there are no more Script items to be processed. Since the top element is non-zero, this will be counted as a valid script. This is very similar to p2sh (<<chapter_p2sh>>) in that older nodes cannot validate further. Newer nodes, however, have a special rule much like p2sh. Recall that with p2sh, the exact Script sequence of <redeem script> OP_HASH160 <hash> OP_EQUAL trigger a special rule.

In the case of p2wpkh, the Script sequence is OP_0 <20-byte hash>. When that Script sequence is encountered, the pubkey and signature from the witness program and the 20-byte hash are combined to be processed exactly as would p2pkh. Namely: <signature> <pubkey> OP_DUP OP_HASH160 <20-byte hash> OP_EQUALVERIFY OP_CHECKSIG. This then is the state that is encountered next:

.p2wpkh Step 3
image::p2wpkh7.png[p2wpkh Step 3]

The rest of the processing of p2wpkh is exactly the same as the processing of p2pkh as seen in <<chapter_script>>. The end state is a single 1 on the stack if and only if the 20-byte hash is the HASH160 of the pubkey and the signature is valid:

.p2wpkh Step 4
image::p2wpkh13.png[p2wpkh Step 4]

The interesting thing here is that for an older node, processing stops at <20-byte hash> 0, as older nodes don't know the special Segwit rule. Only upgraded nodes do the rest of the validation, much like p2sh. Note that this means less data is sent over the network as older nodes simply have no need for the pubkey and signature that they can't verify anyway. Also, we give nodes the option of not having to verify transactions that are X blocks old if they don't want to. In a sense, the signature has been witnessed by a bunch of people and a node can choose to trust that this is valid instead of validating itself if it so chooses.

Furthermore, this is a special rule for Segwit Version 0. Segwit Version 1 can have a completely different processing path. <20-byte hash> 1 could be the special Script sequence that triggers a different rule. Newer versions of Segwit can utilize Schnorr Signatures, Graftroot or even a different scripting system altogether like Simplicity. The key is that Segwit now gives us a clear upgrade path where the software that understands how to validate Segwit Version X will validate such transactions, but software that isn't aware of Segwit Version X simply processes only up to the point of the special rule.

=== P2SH-P2WPKH

P2WPKH is great, but unfortunately, this is a new type of script and older wallets who are unaware of the p2wpkh ScriptPubKey format cannot send bitcoins to these ScriptPubKeys. P2wpkh uses a new address format called bech32, whose ScriptPubKeys older wallets don't know how to create.

The segwit authors found an ingenious way to make Segwit backwards compatible by using p2sh. We can "wrap" p2wpkh inside a p2sh. This is called "nested" Segwit as the Segwit script is nested in a p2sh RedeemScript.

The way this works is that the address is a normal p2sh address, but the RedeemScript is OP_0 <20-byte hash>, or what was the ScriptPubKey of the p2wpkh. Once again different transactions are sent to older nodes vs. newer nodes:

.Pay-to-script-hash-pay-to-witness-pubkey-hash (p2sh-p2wpkh) to pre-BIP0141 software
image::p2sh-p2wpkh1.png[p2sh-p2wpkh to Old Nodes]

.p2sh-p2wpkh to post-BIP0141 software
image::p2sh-p2wpkh2.png[p2sh-p2wpkh to New Nodes]

The difference versus p2wpkh is that the ScriptSig is the fixed RedeemScript that would be the ScriptPubkey in p2wpkh.  The ScriptSig in p2sh-p2wpkh is not empty like p2wpkh, but it is still much shorter than the typical ScriptSig. As this is a p2sh, the ScriptPubKey is exactly the same as any other p2sh. The resulting combined Script looks like this:

.p2sh-p2wpkh ScriptPubKey is the same as a normal p2sh ScriptPubKey
image::p2sh-p2wpkh3.png[p2sh-p2wpkh ScriptPubKey]

We start the Script evaluation like so:

.p2sh-p2wpkh Start
image::p2sh-p2wpkh4.png[p2sh-p2wpkh Start]

Notice that the items to be processed are exactly what triggers the p2sh Special rule. The RedeemScript goes on the stack:

.p2sh-p2wpkh Step 1
image::p2sh-p2wpkh5.png[p2sh-p2wpkh Step 1]

The OP_HASH160 will turn the RedeemScript's hash:

.p2sh-p2wpkh Step 2
image::p2sh-p2wpkh6.png[p2sh-p2wpkh Step 2]

The hash will go on the stack and we then get to OP_EQUAL

.p2sh-p2wpkh Step 3
image::p2sh-p2wpkh7.png[p2sh-p2wpkh Step 3]

At this point, if the hashes are equal, pre-BIP0016 nodes will simply mark the input as valid as they are unaware of the p2sh validation rules. However, post-BIP0016 nodes will now have encountered the special Script sequence for p2sh, so the RedeemScript will then be evaluated as Script instructions. The actual RedeemScript is OP_0 <20-byte hash>, which is exactly the ScriptPubKey for p2wpkh. This makes the Script state look like this:

.p2sh-p2wpkh Step 4
image::p2sh-p2wpkh8.png[p2sh-p2wpkh Step 4]

This should look familar as this is exactly the state that p2wpkh starts with. After OP_0 and the 20-byte hash we are left with this:

.p2sh-p2wpkh Step 5
image::p2sh-p2wpkh9.png[p2sh-p2wpkh Step 5]

At this point, pre-Segwit nodes will mark this input as valid as they are unaware of the Segwit validation rules. However, post-Segwit nodes will now have encountered the special Script sequence for p2wpkh, so the Witness will now be looked up for the signature and pubkey and along with the 20-byte hash, will produce the same Script state as p2pkh:

.p2sh-p2wpkh Step 6
image::p2sh-p2wpkh10.png[p2sh-p2wpkh Step 6]

The rest of the processing is exactly the same as p2pkh (<<chapter_script>>). Assuming the signature and pubkey are valid, we are left with:

.p2sh-p2wpkh End
image::p2sh-p2wpkh11.png[p2sh-p2wpkh End]

As you can see, a p2sh-p2wpkh transaction is backwards compatible all the way to before BIP0016. A node pre-BIP0016 would consider the script valid once the redeemScripts were equal and a post-BIP0016, pre-Segwit node would consider the script valid at the 20-byte hash. Both would not do the full validation and would accept the transaction. A post-Segwit node would do the complete validation, including checking the signature and pubkey.

[NOTE]
.Can Anyone Spend Segwit Outputs?
====
Detractors to Segwit have referred to Segwit outputs as "anyone can spend". This is true if the majority of mining hash power didn't upgrade to Segwit. Fortunately, Segwit was activated on the network with nearly all of the hashing power committed to validating Segwit transactions.
====

==== Coding p2wpkh and p2sh-p2wpkh

The first change we're going to make is to the `Tx` class where we need to mark whether the transaction is segwit or not:

[source,python]
----
include::code-ch13/tx.py[tag=source1]
----

Next, we need to change the parse method so we can correctly parse the transaction.

[source,python]
----
class Tx:
...
include::code-ch13/tx.py[tag=source2]
----
<1> To determine whether we have a segwit transaction or not, we look at the fifth byte. The first four are version, the fifth is the segwit marker.
<2> The fifth byte being 0 is how we tell that this transaction is Segwit (this is not fool-proof, but is what we're going to use). We use different parsers depending on whether it's segwit.
<3> We have to put the stream back to the position before we examined the first 5 bytes.

We've essentially moved the old `parse` method to be `parse_legacy`.

We also have to write a new parser for segwit

[source,python]
----
class Tx:
...
include::code-ch13/tx.py[tag=source3]
----
<1> There are two differences, one of them is the segwit marker.
<2> The other is the witness, which contains a bunch of items for each input.

We have to do something similar for the serialization methods

[source,python]
----
class Tx:
...
include::code-ch13/tx.py[tag=source4]
----
<1> What used to be called `serialize` is now `serialize_legacy`.
<2> The segwit serialization needs the markers here.
<3> The witness is serialized at the end.

In addition we have to change the `hash` method to use the legacy serialization, even for segwit transactions as that will keep our id stable.

[source,python]
----
class Tx:
...
include::code-ch13/tx.py[tag=source5]
----

The `verify_input` method needs to calculate a different `z` as segwit transactions use the process defined in BIP0143 to calculate the `z` for any given input. The witness also has to be passed through to the script evaluation engine.

[source,python]
----
class Tx:
...
    def verify_input(self, input_index):
        tx_in = self.tx_ins[input_index]
        script_pubkey = tx_in.script_pubkey(testnet=self.testnet)
        if script_pubkey.is_p2sh_script_pubkey():
            instruction = tx_in.script_sig.instructions[-1]
            raw_redeem = int_to_little_endian(len(instruction), 1) + instruction
            redeem_script = Script.parse(BytesIO(raw_redeem))
            if redeem_script.is_p2wpkh_script_pubkey():  # <1>
                z = self.sig_hash_bip143(input_index, redeem_script)  # <2>
                witness = tx_in.witness
            else:
                z = self.sig_hash(input_index, redeem_script)
                witness = None
        else:
            if script_pubkey.is_p2wpkh_script_pubkey():  # <3>
                z = self.sig_hash_bip143(input_index)  # <2>
                witness = tx_in.witness
            else:
                z = self.sig_hash(input_index)
                witness = None
        combined_script = tx_in.script_sig + tx_in.script_pubkey(self.testnet)
        return combined_script.evaluate(z, witness)  # <4>
----
<1> This handles the p2sh-p2wpkh case.
<2> BIP0143 details for computing the `z` is detailed in tx.py of this chapter's code.
<3> This handles the p2wpkh case.
<4> The witness needs to go into the evaluation engine so that p2wpkh can work.

We also define what a p2wpkh Script looks like in `script.py`.

[source,python]
----
include::code-ch13/script.py[tag=source1]
...
include::code-ch13/script.py[tag=source2]
----
<1> This is OP_0 <20-byte-hash>.
<2> This checks if the current script is a p2wpkh ScriptPubKey.

Lastly, we need to implement the special rule in the `evaluate` method.

[source,python]
----
class Script:
...
    def evaluate(self, z, witness):
        ...
        while len(instructions) > 0:
...
            else:
                stack.append(instruction)
		...
include::code-ch13/script.py[tag=source3]
----
<1> This is where we execute Witness Program version 0 for p2wpkh. Note we make a p2pkh Script from the 20-byte hash on top and execute exactly as if it were p2pkh.

=== Pay-to-witness-script-hash (p2wsh)

While p2wpkh takes care of a major use case, we need something more flexible if we want something like multisig. This is where p2wsh comes in. Pay-to-witness-script-hash is very much like p2sh, but with all the ScriptSig data in the witness field instead.

Once again, we send different data to pre-BIP0141 software vs post-BIP0141 software:

.Pay-to-witness-script-hash as seen by pre-BIP0141 software
image::p2wsh-3.png[p2wsh to old nodes]

.Pay-to-witness-script-hash as seen by post-BIP0141 software
image::p2wsh-4.png[p2wsh to new nodes]

The ScriptPubKey for a p2wsh is OP_0 <32-byte hash>. This is the special rule that gets triggered. The ScriptSig, as with p2wpkh, is empty. The spending p2wsh output creates a script like this:

.Pay-to-witness-script-hash (p2wsh) ScriptPubKey
image::p2wsh-8.png[p2wsh ScriptPubKey]

The processing of this Script starts similarly to p2wpkh:

.p2sh Start
image::p2wsh-9.png[p2wsh Start]

.p2wsh Step 1
image::p2wsh-10.png[p2wsh Step 1]

The 32-byte hash is simply an element, so it goes straight to the stack:

.p2wsh Step 2
image::p2wsh-11.png[p2wsh Step 2]

As with p2wpkh, older nodes will stop as there are no more Script items to be processed and evaluated as valid. Newer nodes will continue evaluation by looking at the Witness for this input.

The Witness for p2wsh in our case is a 2-of-3 multisig and looks like this:

.p2wsh Witness
image::p2wsh-6.png[p2wsh Witness]

The last item of the Witness is called the *WitnessScript* and must sha256 to the 32-byte hash above. Note this is sha256, not hash256. Once the Witness Script is validated by having the same hash value, the WitnessScript is put into the instruction set. The Witness Script looks like this:

.p2wsh Witness Script
image::p2wsh-7.png[p2wsh Witness Script]

The rest of the Witness is put on top to produce this Instruction set:

.p2wsh Step 3
image::p2wsh-12.png[p2wsh Step 3]

As you can see, this is a 2-of-3 multisig much like what was explored in <<chapter_tx>>.

.p2wsh Step 4
image::p2wsh-13.png[p2wsh Step 4]

If the signatures are valid, we end like this:

.p2wsh Step 5
image::p2wsh-13.png[p2wsh Step 5]

The WitnessScript is very similar to the RedeemScript in that the sha256 of the serialization is addressed in the ScriptPubKey, but only revealed when being spent. Once the sha256 of the WitnessScript is found to be the same as the 32-byte hash, the WitnessScript is interpreted as Script instructions and added to the instruction set. The rest of the Witness is then put on the instruction set as well, producing the final set of instructions to be evaluated. p2wsh is particularly important as unmalleable multisig is a very useful feature for creating payment channels which is the atomic unit of the Lightning Network.

=== P2SH-P2WSH

Like p2sh-p2wpkh, p2sh-p2wsh is a way to make p2wsh backward-compatible. These transactions are sent to older nodes vs newer nodes:

.Pay-to-script-hash-pay-to-witness-script-hash (p2sh-p2wsh) to pre-BIP0141 software
image::p2sh-p2wsh-4.png[p2sh-p2wsh to Old Nodes]

.p2sh-p2wsh to post-BIP0141 software
image::p2sh-p2wsh-1.png[p2sh-p2wsh to New Nodes]

As with p2sh-p2wpkh, the ScriptPubKey is indistinguishable from any other p2sh and the ScriptSig is only the RedeemScript:

.p2sh-p2wsh ScriptPubKey
image::p2sh-p2wpkh3.png[p2sh-p2wsh ScriptPubKey]

We start the p2sh-p2wsh in exactly the same way that p2sh-p2wpkh starts.

.p2sh-p2wsh Start
image::p2sh-p2wpkh4.png[p2sh-p2wsh Start]

The RedeemScript goes on the stack:

.p2sh-p2wsh Step 1
image::p2sh-p2wpkh5.png[p2sh-p2wsh Step 1]

The OP_HASH160 will turn the RedeemScript's hash:

.p2sh-p2wsh Step 2
image::p2sh-p2wpkh6.png[p2sh-p2wsh Step 2]

The hash will go on the stack and we then get to OP_EQUAL

.p2sh-p2wsh Step 3
image::p2sh-p2wpkh7.png[p2sh-p2wsh Step 3]

As with p2sh-p2wpkh, if the hashes are equal, pre-BIP0016 nodes will simply mark the input as valid as they are unaware of the p2sh validation rules. However, post-BIP0016 nodes will now have encountered the special Script sequence for p2sh, so the RedeemScript will now be processed as Script. The actual RedeemScript turns out to be OP_0 <32-byte hash>, which is exactly the ScriptPubKey for p2wsh.

.p2sh-p2wsh RedeemScript
image::p2sh-p2wsh-6.png[p2sh-p2wsh RedeemScript]

This makes the Script state look like this:

.p2sh-p2wsh Step 4
image::p2wsh-9.png[p2sh-p2wsh Step 4]

Of course, this is the exact same starting state as p2wsh.

.p2sh-p2wsh Step 5
image::p2wsh-10.png[p2sh-p2wsh Step 5]

The 32-byte hash is simply an element, so it goes straight to the stack:

.p2sh-p2wsh Step 6
image::p2wsh-11.png[p2sh-p2wsh Step 6]

At this point, pre-Segwit nodes will mark this input as valid as they are unaware of the Segwit validation rules. However, post-Segwit nodes will now have encountered the special Script sequence for p2wsh, so the Witness will now be looked up for the WitnessScript and if the WitnessScript has a sha256 equal to the 32-byte hash, the WitnessScript will be interpreted as Script and put into the instruction set:

.p2sh-p2wsh Witness
image::p2sh-p2wsh-8.png[p2sh-p2wsh Witness]

.p2sh-p2wsh Witness Script
image::p2wsh-7.png[p2wsh Witness Script]

This is a 2-of-3 multisig:

.p2sh-p2wsh Step 7
image::p2wsh-12.png[p2sh-p2wsh Step 7]

As you can see, this is a 2-of-3 multisig much like what was explored in <<chapter_tx>>. If the signatures are valid, we end like this:

.p2sh-p2wsh End
image::p2wsh-14.png[p2sh-p2wsh End]

This makes p2wsh backwards compatible, allowing older wallets to send to p2sh ScriptPubKeys which are already familiar to them.

==== Coding p2wsh and p2sh-p2wsh

The parsing and serialization are exactly the same as before. The main changes have to do with `verify_input` in tx.py and `evaluate` in script.py.

[source,python]
----
class Tx:
...
    def verify_input(self, input_index):
        tx_in = self.tx_ins[input_index]
        script_pubkey = tx_in.script_pubkey(testnet=self.testnet)
        if script_pubkey.is_p2sh_script_pubkey():
            instruction = tx_in.script_sig.instructions[-1]
            raw_redeem = int_to_little_endian(len(instruction), 1) + instruction
            redeem_script = Script.parse(BytesIO(raw_redeem))
            if redeem_script.is_p2wpkh_script_pubkey():
                z = self.sig_hash_bip143(input_index, redeem_script)
                witness = tx_in.witness
            elif redeem_script.is_p2wsh_script_pubkey():  # <1>
                instruction = tx_in.witness[-1]
                raw_witness = encode_varint(len(instruction)) + instruction
                witness_script = Script.parse(BytesIO(raw_witness))
                z = self.sig_hash_bip143(input_index, witness_script=witness_script)
                witness = tx_in.witness
            else:
                z = self.sig_hash(input_index, redeem_script)
                witness = None
        else:
            if script_pubkey.is_p2wpkh_script_pubkey():
                z = self.sig_hash_bip143(input_index)
                witness = tx_in.witness
            elif script_pubkey.is_p2wsh_script_pubkey():  # <2>
                instruction = tx_in.witness[-1]
                raw_witness = encode_varint(len(instruction)) + instruction
                witness_script = Script.parse(BytesIO(raw_witness))
                z = self.sig_hash_bip143(input_index, witness_script=witness_script)
                witness = tx_in.witness
            else:
                z = self.sig_hash(input_index)
                witness = None
        combined_script = tx_in.script_sig + tx_in.script_pubkey(self.testnet)
        return combined_script.evaluate(z, witness)
----
<1> This takes care of p2sh-p2wsh
<2> This takes care of p2wsh

We need to identify p2wsh in script.py:

[source,python]
----
include::code-ch13/script.py[tag=source4]
...
class Script:
...
include::code-ch13/script.py[tag=source5]
----
<1> OP_0 <32-byte script> is what we expect

Lastly, we need to insert the special rule for p2wsh:

[source,python]
----
class Script:
...
    def evaluate(self, z, witness):
       ...
        while len(instructions) > 0:
	   ...
	   else:
                stack.append(instruction)
    	        ...
include::code-ch13/script.py[tag=source6]
----
<1> We know the top element is the sha256 hash.
<2> We know the second element is 0, which we don't need.
<3> Everything but the WitnessScript can now go into the instruction set.
<4> The WitnessScript is the last item of the Witness.
<5> The WitnessScript has to hash to the sha256 that was in the stack.
<6> Parse the WitnessScript and add to the instruction set.

=== Other improvements

Other improvements to Segwit include fixing the quadratic hashing problem through a different calculation of the signature hash. Essentially, a lot of the calculations for signature hash, or `z`, can be reused instead of requiring a new hash256 hash for each input. The details of the signature hash calculation is detailed in BIP0143 and can be seen in `code-ch13/tx.py`.

Another improvement is that uncompressed SEC pubkeys are now forbidden and thus, only compressed SEC pubkeys are used for Segwit, saving space.

==== Conclusion

We've now covered what's so interesting about Segwit as a taste of what's now possible. The next chapter will cover next steps that you can take on your developer journey.