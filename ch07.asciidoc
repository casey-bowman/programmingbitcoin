= Programming Bitcoin
:imagesdir: images

[[chapter_tx]]

== Transaction Creation and Validation

[.lead]
One of the trickiest things to code in Bitcoin is the validating transactions. Another one is the act of creating the transaction itself. In this chapter, we'll cover the exact steps to validating transactions and creating transactions. In fact, we'll be creating a transaction for ourselves.

=== Validating Transactions

Every node, when receiving transactions makes sure that each transaction adheres to the network rules. This process is called _transaction validation_. Here are the main things that a node needs to check for:

1. Inputs of the transaction are previously unspent
2. Sum of the inputs are greater than or equal to the sum of the outputs
3. ScriptSig actually unlocks the previous ScriptPubKey

(1) prevents double-spending. Any input that's already been spent cannot be spent again.

(2) makes sure no new Bitcoins are created (except in a special transaction called the coinbase transaction. More on that in <<chapter_blocks>>).

(3) makes sure that the combined Script resolves to True. In the vast majority of transactions, this means checking that the one or more signatures in the ScriptSig are valid.

Let's look at how each is checked.

=== Checking the spentness of inputs

In order to prevent double-spending, each input has to be checked to see if it's previously been spent. In order to check that this input has _not_ been used in any other transaction, we actually need access to the entire blockchain or a verified unspent transaction output set (aka UTXOs, see <<chapter_tx_parsing>>). We cannot determine from the transaction itself whether it's double-spending, much like we cannot look at a personal check and determine whether it's overdrafting. The only way to know is to have looked at the entire set of transactions.

In Bitcoin, we can determine whether an input is being double spent by keeping track of the UTXOs. If an input is in the UTXO set, that transaction input is _not_ double-spending. If the transaction passes the rest of the validity tests, then we remove all the inputs of the transaction from the UTXO set. Light clients that do not have access to the blockchain have to trust other nodes for a lot of the information, including whether an input has already been spent.

A full node can check the spentness of an input pretty easily, a light client has to get this information from someone else.

=== Checking the sum of the inputs vs the sum of the outputs

The second part of the validation is making sure that the sum of the inputs is greater than or equal to the sum of the outputs. This ensures that the transaction does not create new coins. The one exception is a Coinbase transaction which we'll study more in <<chapter_blocks>>. The inputs don't have an amount, so this must be looked up on the blockchain. Once again, full nodes will have access to the amounts associated with the unspent output, but light clients will have to depend on full nodes to supply this information.

We covered how to calculate fees in <<chapter_tx_parsing>>. This validation step is essentially the same as checking that the fee is not negative (that is, creating money). Recall the last exercise in <<chapter_tx_parsing>>. The method `fee` looks like this:

[source,python]
----
class Tx:
    ...
include::code-ch07/tx.py[tag=source1]
----

We can test to see if this transaction is trying to print money by using this method.

[source,python]
----
include::code-ch07/examples.py[tag=example1]
----
<1> This only works because we're using Python. See Note.

If the fee is negative, we know that the `output_sum` is greater than the `input_sum`, which is another way of saying that this transaction is trying to create Bitcoins out of the ether.

[NOTE]
.Value Overflow Incident
====
Back in 2010, there was a transaction that created 184 billion new Bitcoins. This is due to the fact that in C++, the value field is a _signed_ integer and not an _unsigned_ integer. That is, the value could be negative!

The clever transaction passed all the checks including the one for not creating new bitcoins, but only because the output amounts overflowed past the maximum number. Note 2^64^ is roughly 1.84 * 10^19^ satoshis, which is 184 billion Bitcoins. The fee was negative by enough that the C++ code was tricked into believing that the fee was actually positive by 0.1 BTC!

The vulnerability is detailed in CVE-2010-5139 and was patched via soft-fork in Bitcoin Core 0.3.11. The transaction and the extra Bitcoins it created was invalidated retroactively by a block reorganization, which is another way of saying a new chain of blocks that's longer was mined to replace it.
====

=== Checking the Signature

Perhaps the trickiest part of validating a transaction is the process of checking its signatures. A transaction typically has at least one signature per input. If there are multisig outputs being spent, there may be more. As we learned in <<chapter_elliptic_curve_cryptography>>, the ECDSA signature algorithm requires the public key `P`, the signature hash `z`, and the signature `(r,s)`. Once these are defined, the process of verifying the signature is pretty simple as we already coded in <<chapter_elliptic_curve_cryptography>>:

[source,python]
----
include::code-ch07/examples.py[tag=example2]
----

SEC public keys and DER signatures are in the stack when an instruction like `OP_CHECKSIG` is executed make getting the public key `P` and signature `(r,s)` pretty straightforward. The hard part is getting the actual signature hash `z`. A naive way to get the signature hash would be to hash the entire transaction. Unfortunately, we can't do that since the signature is part of the ScriptSig and a signature can't sign itself.

.Validation Start
image::validation1.png[Validation Start]

Instead, what you need to do is to modify the transaction before actually signing it. That is, we have to compute a different signature hash, or `z`, _for each input_. The procedure is as follows.

==== Step 1: Empty all the ScriptSigs

The first step is to empty all the ScriptSigs when checking the signature. The same procedure is used for creating the signature, except the ScriptSigs are usually already empty.

.Empty each input's ScriptSig (yellow highlighted field)
image::validation2.png[Validation Step 1]

==== Step 2: Replace the ScriptSig of the input being signed with the previous ScriptPubKey

Each input points to a previous transaction output, which has a ScriptPubKey. We take this ScriptPubKey and put that in place of the empty ScriptSig. This may require a lookup on the blockchain, but in practice, the signer already knows the ScriptPubKey as the input was chosen as one where the signer has the private key to unlock it.

.Replace the ScriptSig (yellow highlighted field) for one of the inputs with the previous ScriptPubKey
image::validation3.png[Validation Step 2]

==== Step 3: Append the hash type

Lastly, we add a 4-byte hash type to the end. This is to specify what the signature is authorizing. The signature can authorize that this input has to go with all the other inputs and outputs (SIGHASH_ALL), go with a specific output (SIGHASH_SINGLE) or go with any output whatsoever (SIGHASH_NONE). The latter two have some theoretical use cases, but in practice, almost every transaction is signed with SIGHASH_ALL. That is, the final transaction must have the exact outputs that were signed, or the input signature is invalid.

The integer corresponding to SIGHASH_ALL is 1 and this has to be encoded in Little-Endian over 4 bytes, which makes the transaction look like this:

.Append the hash type (SIGHASH_ALL), or the orange `01000000`
image::validation4.png[Validation Step 3]

The hash256 of this modified transaction is interpreted as a Big-Endian integer is our `z`. The code for getting our `z` looks like this:

[source,python]
----
include::code-ch07/examples.py[tag=example3]
----

Now that we have our `z`, we can take the public key in SEC format and the signature in DER format from the script sig to verify the signature.

[source,python]
----
include::code-ch07/examples.py[tag=example4]
----
<1> z is from the code above

We can now make this transaction validation process into a method for `Tx`. Thankfully, the Script engine can already handle point verification (see <<chapter_script>>), so our task is to glue everything together. We need the `z`, or signature hash, to pass into the `evaluate` method and we need to combine the ScriptSig and ScriptPubKey.

[NOTE]
.Quadratic Hashing
====
One of the reasons why this method of creating the signature hash is inefficient is because of the Quadratic Hashing problem. The Quadratic Hashing problem is the fact that calculating the signature hashes, or `z`'s increases quadratically with the number of inputs in a transaction. Specifically, the number of hash256 operations for calculating the `z` will increase on a per-input basis, but in addition, the length of the transaction will increase, slowing down each hash256 operation as the entire signature hash will need to be calculated anew for each input.

This was particularly obvious with the biggest transaction ever mined: `bb41a757f405890fb0f5856228e23b715702d714d59bf2b1feb70d8b2b4e3e08`. This transaction had 5569 inputs and 1 output and took many miners over a minute to validate as the signature hashes for the transaction were so expensive to calculate.

Segwit (<<chapter_segwit>>) fixes this with a different way of calculating the signature hash, which is specified in BIP0143.
====

include::code-ch07/answers.py[tag=exercise1]

include::code-ch07/answers.py[tag=exercise2]

=== Verifying the entire transaction

Now that we can verify an input, the task of verifying the entire transaction is more or less straightforward:

[source,python]
----
class Tx:
...
include::code-ch07/tx.py[tag=source2]
----
<1> We make sure that we are not creating money out of thin air
<2> We make sure that each input has a correct ScriptSig

This is not sufficient as we're not checking for double-spends or checking some of the many other consensus rules (max sigops, size of transaction, etc). This is, however, a good start.

=== Creating transactions

Once validation of transactions is understood, the creation of transactions is more or less straightforward. The key to making the creation of transactions work is to make sure that all the transaction validates. For example, the transaction will need the sum of the inputs to be greater than or equal to the sum of the outputs. Propagating invalid transactions on the network may get you banned by peers.

To create a transaction, you must first have some outputs that have been sent to you. That is, outputs whose ScriptPubKey you can unlock. The vast majority of the time, you will need one or more private keys corresponding to the public keys that are hashed in the ScriptPubKey.

The rest of this chapter will be concerned with creating a transaction whose inputs are locked by p2pkh ScriptPubKeys.

=== Creating a transaction

The construction of a transaction is most easily done by answering some basic questions:

1. Where do we want the bitcoins to go?
2. What outputs are assigned to our private key(s) that are unspent?
3. How quickly do we want these transactions to get into the blockchain?

We'll be using testnet for this example, though this can easily be applied to mainnet.

The first question is about how much we want to pay whom. We can pay one or more addresses. For the sake of this example, we will pay 0.1 testnet bitcoins (tBTC) to `mnrVtF8DWjMu839VW3rBfgYaAfKk8983Xf`.

The second question is about what's in our wallet. What do we have available to spend? For the sake of this example, we have an output here denoted by transaction id and output index: `0d6fe5213c0b3291f208cba8bfb59b7476dffacc4e5cb66f6eb20a080843a299:13`. Looking at a testnet block explorer, we can see that our output is worth 0.33 tBTC.

.UTXO that we're spending
image::txcreation1.png[Transaction seen on the blockchain]

Since this is more than 0.1 tBTC, we'll want to send the rest back to ourselves. Though it's generally bad privacy and security practice to re-use addresses, we'll send the bitcoins back to the same address to make this step easier.

`mzx5YhAH9kNHtcN481u6WkjeHjYtVeKVh2`

.Why reusing addresses is a bad idea
[WARNING]
====
Back in <<chapter_script>>, we went through how p2pk was inferior to p2pkh, in part because it was only protected by ECDSA. p2pkh, on the other hand, is also protected by sha256 and ripemd160. However, because the blockchain is public, if you've already _spent from_ an address, you have already revealed your public key as part of the ScriptSig. Once you've revealed that public key, sha256 and ripemd160 no longer protect you as the attacker knows the public key and doesn't have to guess.

That said, as of this writing, you are still protected by the Discrete Log problem, which is unlikely to be broken any time soon. It's important from a security perspective, however, to understand what you're protected by.

The other reason to not reuse addresses is for privacy. Having a single address for yourself means that people can link your transactions together. If, for example, you bought something private (medication to treat some disease you don't want others to know about) and utilized the same address for a donation to some charity, the charity and the medication vendor could easily identify that you did business with the other.

Privacy leaks tend to become security holes over time as bad guys get to know more about you and can thus target you.
====

The third question is really about fees. If we want to get the transaction in a block faster, we'll want to pay more fees and if we don't mind waiting, we'll want to pay less. In our case, we'll use 0.01 tBTC as our fee.

.Fee Estimation
[NOTE]
====
Fee estimation is generally done on a per-byte basis. Roughly speaking, if your transaction is 600 bytes, you'll want to have double the fees as a transaction that's 300 bytes. This is because block space is limited and larger transactions take up more space. This calculation has changed a bit since Segregated Witness (See <<chapter_segwit>>), but the general principle still applies. You want to pay enough on a per-byte basis so that miners are motivated to include your transaction as soon as possible.

When blocks aren't full, almost any amount above the default relay limit (1 satoshi/byte) is enough to get your transaction included. However, when blocks are full, this is not an easy thing to estimate. There are multiple ways to estimate fees including:

* Looking at various fee levels and estimating the probability of inclusion based on past blocks and the mempools at the time.
* Looking at the current mempool and adding a fee that roughly corresponds to enough economic incentivization.
* Going with some fixed fee.

Many wallets use different strategies and this is an active area of research.
====

=== Combining to make a transaction

Our plan for the transaction is now laid out. We will have one input and two outputs. But first, let's look at some other tools we'll need.

We first need a way to take an address and get the 20-byte hash out of it. This is the opposite of encoding an address, so we call the function `decode_base58`

[source,python]
----
include::code-ch07/helper.py[tag=source1]
----
<1> We have to figure out first what number is encoded in this base58 address
<2> Once we have the actual integer, we convert it to Big-Endian bytes
<3> The first byte is the network prefix and the last 4 are the checksum. The middle 20 is the actual 20-byte hash (aka hash160).

The other thing we will need is a way to convert the 20-byte hash to a ScriptPubKey. We call this `p2pkh_script` since we're converting the hash160 to a p2pkh.

[source,python]
----
include::code-ch07/script.py[tag=source1]
----

Note that `0x76` is `OP_DUP`, `0xa9` is `OP_HASH160`, `h160` is a 20-byte element, `0x88` is `OP_EQUALVERIFY` and `0xac` is `OP_CHECKSIG`. This is exactly the p2pkh ScriptPubKey from <<chapter_script>>.

We can now proceed to create the transaction.

[source,python]
----
include::code-ch07/examples.py[tag=example5]
----
<1> The amount must be in satoshis and given there are 100,000,000 satoshis per BTC, we have to multiply and cast to an integer.
<2> Note we have to designate which network to look up using the `testnet=True` argument.

We have created the actual transaction. However, every ScriptSig in this transaction is currently empty and filling it is where we turn next.

=== Signing a transaction

The actual signing of the transaction is the trickiest part. Thankfully, we know how to get the signature hash, or `z`, from earlier in this chapter. If we have the private key whose public key hash160's to the 20-byte hash in the ScriptPubKey, we can sign the `z` and produce the DER signature.

[source,python]
----
include::code-ch07/examples.py[tag=example6]
----
<1> We only need to sign the first input as there's only one input. Multiple inputs would require us to sign each input with the right private key.
<2> The signature is actually a combination of the DER signature and the hash type which is SIGHASH_ALL in our case.
<3> The ScriptSig of a p2pkh from <<chapter_script>> is exactly two elements: signature and SEC format public key.
<4> Again, we only have that one input that we need to sign, but if there were more, this process of creating the ScriptSig would need to be done for each input.

include::code-ch07/answers.py[tag=exercise3]

==== Creating your own transactions on testnet

The first step to creating your own transactions is to get some coins for yourself. In order to do that you'll need an address. If you completed the exercises in <<chapter_serialization>>, you should have your own testnet address and private key. If you don't remember, here's how:

[source,python]
----
include::code-ch07/examples.py[tag=example7]
----
<1> Please use a phrase other than `Jimmy Song secret`

Now that you have an address, you can get some coins at a myriad of testnet faucets. Faucets are where you can get testnet coins for free. You can Google "testnet bitcoin faucet" to find them or use one from this list: https://en.bitcoin.it/wiki/Testnet#Faucets. My website, https://testnet.programmingbitcoin.com/ will point to a testnet faucet that works. You will want to enter your address as generated above.

After you get some coins, see if you can spend them using the library you've been writing. This is usually a big accomplishment for a budding Bitcoin developer, so please take some time to see if you can complete this exercise.

include::code-ch07/answers.py[tag=exercise4]

include::code-ch07/answers.py[tag=exercise5]

=== Conclusion

We've successfully validated existing transactions on the blockchain and we've also created our own transactions on testnet! This is a major accomplishment and you should be proud.

The code we have so far will do p2pkh and p2pk. In the next chapter, we turn to a more advanced smart contract in Bitcoin, p2sh.
